# 함수 : 특정 작업을 수행하는 코드 집합
# 단독 코드만으로는 실행이 불가, 호출을 통해서 실행됨
# 사용자 정의 함수 : 규칙이 정해져 있음
# 내장함수 --- 파이썬 설치 시에 이미 등록되어 있는 함수
#             print(), input(), len(), type()

# 함수 사용 이유
#(1) 코드 재사용
#(2) 중복된 코드 제거
#(3) 작업 분해 : 복잡한 코드를 분해시켜서 기능별로 작업

# --------------------------------------------------
# 함수 정의
# def 라는 정의어를 이용해서 시작
# def 함수이름([매개변수1,매개변수2,...]) : ** [] 생략 가능의 의미
#     실행코드
#     [return] --- 함수 호출자에게 결과를 돌려줘야 할 때는 return이 필요
# 함수의 결과를 화면출력이나 파일저장, 혹은 시스템 호출 등의 일이 일어나면 return은 없는 경우가 많고,
# 함수의 결과가 계산 결과거나 데이터를 가져와야 하는 경우에는 return이 일어난다.

# 데이터를 파일로 저장하는 함수 : 반환문(return) 필요 없음
# 파일을 데이터로 가져오는 함수 : 반환문 필요

def show_info() : #함수 정의
    print('성명 : 홍길동')
    print('나이 : 20')
    #정의만 되어 있으면 실행하지 않는다.

# 함수 호출
# 함수 이름([인수1,인수2,...])
# 인수는 함수를 정의할 때 등록한 매개변수에 따라 달라짐
show_info() #반환값이 없는 함수 호출

# --------------------------------------------------
# 결과값 반환하는 반환값 있는 함수
# 함수가 호출된 곳으로 반환

# 함수 정의
def sum() :
    num1 = int(input('숫자 1 입력 : '))
    num2 = int(input('숫자 2 입력 : '))
    print('합 : %d' % (num1+num2))

sum() #반환값이 없으면 호출된 자리도 어떤 data도 넘어오지 않는다.

# 반환값 있는 함수
def sum():
    num1 = int(input('숫자 1 입력 : ')) # ex. 3 입력
    num2 = int(input('숫자 2 입력 : ')) # ex. 4 입력
    return(num1 + num2) #2. 호출된 함수에서 결과(ex. 7)를 반환하게 되고

tot = sum() #1. 함수 호출하게 되면, sum() 호출 자리에 num1+num2한 결과(ex. 7)가 반환
# tot = 7 이란 3. 코드로 변경된 후 함수가 종료

# 함수 호출하면 결과값이 함수이름 위치로 반환되고, 보통 반환된 값을 변수에 저장해서 추후 사용
print('두 수의 합은 : %d'%tot)

# 변수에 저장 없이 호출 결과를 바로 다른 함수나 연산 시에 사용 가능
print('두 수의 합은 : %d' % sum())
# sum() 호출 자리로 결과 반환되면 반환된 결과가 출력됨

tot_sum = 10*sum() #연산식에서 함수 호출

#--- 여러개의 결과값 반환하기
# 파이썬을 제외한 다른 언어에서는 함수는 항상 하나의 값만 반환

# 파이썬에서는 함수가 여러개의 값을 반환할 수 있음
def multi_return() :
    return 1,2,3 # 1,2,3 : 3개의 값 변환

# 반환된 여러개의 값을 각각 변수에 저장
a,b,c = multi_return()
print(a,b,c)

# 반환된 여러개의 값을 하나의 변수에 저장
result = multi_return()
print(result) # (1, 2, 3) : 여러개 반환값이 하나의 형태로 반환
print(type(result)) # <class 'tuple'> : 튜플 형태로 반환

### 주의 !
# 함수에서 반환문을 사용할 때 return문 하나에 여러개의 값을 반환하는 것은 가능
# 단, return 문을 여러번 사용하면 안됨
# 에러는 아니지만 실행되지 않는다.

def multi_return() :
    return 1,2,3

def multi_return() :
    return 1 #실행됨
    return 2 #실행되지 않음
    return 3 #실행되지 않음
### 1은 리턴하고 나머지는 무시됨(에러는 발생되지 않음)

print(multi_return()) # 1만 출력

# --------------------------------------------------
# 함수를 호출 시 반환값이 없는 경우에 호출된 결과를 변수에 저장하면

def show() :
    print('hello')

result = show() #None 이 저장된다.
print(result)


